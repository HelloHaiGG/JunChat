// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: push.proto

package connect

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MessageBody struct {
	Id                   string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Text                 string   `protobuf:"bytes,2,opt,name=Text,proto3" json:"Text,omitempty"`
	Urls                 []string `protobuf:"bytes,3,rep,name=Urls,proto3" json:"Urls,omitempty"`
	FileBody             []byte   `protobuf:"bytes,4,opt,name=FileBody,proto3" json:"FileBody,omitempty"`
	SendTime             int64    `protobuf:"varint,5,opt,name=SendTime,proto3" json:"SendTime,omitempty"`
	Sender               string   `protobuf:"bytes,6,opt,name=Sender,proto3" json:"Sender,omitempty"`
	Receiver             string   `protobuf:"bytes,7,opt,name=Receiver,proto3" json:"Receiver,omitempty"`
	MsgType              int32    `protobuf:"varint,8,opt,name=MsgType,proto3" json:"MsgType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageBody) Reset()         { *m = MessageBody{} }
func (m *MessageBody) String() string { return proto.CompactTextString(m) }
func (*MessageBody) ProtoMessage()    {}
func (*MessageBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1e4bfd2e9d102bb, []int{0}
}
func (m *MessageBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageBody.Merge(m, src)
}
func (m *MessageBody) XXX_Size() int {
	return m.Size()
}
func (m *MessageBody) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageBody.DiscardUnknown(m)
}

var xxx_messageInfo_MessageBody proto.InternalMessageInfo

func (m *MessageBody) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MessageBody) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *MessageBody) GetUrls() []string {
	if m != nil {
		return m.Urls
	}
	return nil
}

func (m *MessageBody) GetFileBody() []byte {
	if m != nil {
		return m.FileBody
	}
	return nil
}

func (m *MessageBody) GetSendTime() int64 {
	if m != nil {
		return m.SendTime
	}
	return 0
}

func (m *MessageBody) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MessageBody) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *MessageBody) GetMsgType() int32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

type PushMsgParams struct {
	Encrypted            bool         `protobuf:"varint,1,opt,name=Encrypted,proto3" json:"Encrypted,omitempty"`
	Encryption           int32        `protobuf:"varint,2,opt,name=Encryption,proto3" json:"Encryption,omitempty"`
	Decompression        bool         `protobuf:"varint,3,opt,name=Decompression,proto3" json:"Decompression,omitempty"`
	Msg                  *MessageBody `protobuf:"bytes,4,opt,name=Msg,proto3" json:"Msg,omitempty"`
	ServerId             string       `protobuf:"bytes,5,opt,name=ServerId,proto3" json:"ServerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PushMsgParams) Reset()         { *m = PushMsgParams{} }
func (m *PushMsgParams) String() string { return proto.CompactTextString(m) }
func (*PushMsgParams) ProtoMessage()    {}
func (*PushMsgParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1e4bfd2e9d102bb, []int{1}
}
func (m *PushMsgParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushMsgParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushMsgParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushMsgParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushMsgParams.Merge(m, src)
}
func (m *PushMsgParams) XXX_Size() int {
	return m.Size()
}
func (m *PushMsgParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PushMsgParams.DiscardUnknown(m)
}

var xxx_messageInfo_PushMsgParams proto.InternalMessageInfo

func (m *PushMsgParams) GetEncrypted() bool {
	if m != nil {
		return m.Encrypted
	}
	return false
}

func (m *PushMsgParams) GetEncryption() int32 {
	if m != nil {
		return m.Encryption
	}
	return 0
}

func (m *PushMsgParams) GetDecompression() bool {
	if m != nil {
		return m.Decompression
	}
	return false
}

func (m *PushMsgParams) GetMsg() *MessageBody {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *PushMsgParams) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

type PushMsgRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PushMsgRsp) Reset()         { *m = PushMsgRsp{} }
func (m *PushMsgRsp) String() string { return proto.CompactTextString(m) }
func (*PushMsgRsp) ProtoMessage()    {}
func (*PushMsgRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1e4bfd2e9d102bb, []int{2}
}
func (m *PushMsgRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushMsgRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushMsgRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushMsgRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushMsgRsp.Merge(m, src)
}
func (m *PushMsgRsp) XXX_Size() int {
	return m.Size()
}
func (m *PushMsgRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_PushMsgRsp.DiscardUnknown(m)
}

var xxx_messageInfo_PushMsgRsp proto.InternalMessageInfo

func (m *PushMsgRsp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func init() {
	proto.RegisterType((*MessageBody)(nil), "connect.MessageBody")
	proto.RegisterType((*PushMsgParams)(nil), "connect.PushMsgParams")
	proto.RegisterType((*PushMsgRsp)(nil), "connect.PushMsgRsp")
}

func init() { proto.RegisterFile("push.proto", fileDescriptor_d1e4bfd2e9d102bb) }

var fileDescriptor_d1e4bfd2e9d102bb = []byte{
	// 363 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0xdf, 0x6a, 0xe2, 0x40,
	0x14, 0xc6, 0x1d, 0x63, 0xfc, 0x73, 0x5c, 0x17, 0x99, 0x5d, 0x64, 0x90, 0x25, 0x84, 0xb0, 0x2c,
	0xb9, 0xf2, 0xc2, 0x7d, 0x03, 0xdd, 0x6d, 0xf1, 0x22, 0x20, 0xd3, 0xf4, 0xaa, 0x57, 0x36, 0x39,
	0xc4, 0x80, 0x66, 0xc2, 0x4c, 0x94, 0xfa, 0x26, 0x7d, 0x93, 0xbe, 0x42, 0xa1, 0x37, 0x7d, 0x84,
	0x62, 0x5f, 0xa4, 0xcc, 0x24, 0x4d, 0xd5, 0xbb, 0xef, 0xfb, 0xcd, 0xc9, 0xf9, 0xf3, 0x11, 0x80,
	0x7c, 0xa7, 0xd6, 0x93, 0x5c, 0x8a, 0x42, 0xd0, 0x4e, 0x24, 0xb2, 0x0c, 0xa3, 0xc2, 0x7b, 0x21,
	0xd0, 0x0f, 0x50, 0xa9, 0x55, 0x82, 0x33, 0x11, 0x1f, 0xe8, 0x77, 0x68, 0x2e, 0x62, 0x46, 0x5c,
	0xe2, 0xf7, 0x78, 0x73, 0x11, 0x53, 0x0a, 0xad, 0x10, 0x1f, 0x0a, 0xd6, 0x34, 0xc4, 0x68, 0xcd,
	0x6e, 0xe5, 0x46, 0x31, 0xcb, 0xb5, 0x34, 0xd3, 0x9a, 0x8e, 0xa1, 0x7b, 0x95, 0x6e, 0x4c, 0x0f,
	0xd6, 0x72, 0x89, 0xff, 0x8d, 0xd7, 0x5e, 0xbf, 0xdd, 0x60, 0x16, 0x87, 0xe9, 0x16, 0x99, 0xed,
	0x12, 0xdf, 0xe2, 0xb5, 0xa7, 0x23, 0x68, 0x6b, 0x8d, 0x92, 0xb5, 0xcd, 0x84, 0xca, 0xe9, 0x6f,
	0x38, 0x46, 0x98, 0xee, 0x51, 0xb2, 0x8e, 0x79, 0xa9, 0x3d, 0x65, 0xd0, 0x09, 0x54, 0x12, 0x1e,
	0x72, 0x64, 0x5d, 0x97, 0xf8, 0x36, 0xff, 0xb4, 0xde, 0x13, 0x81, 0xc1, 0x72, 0xa7, 0xd6, 0x81,
	0x4a, 0x96, 0x2b, 0xb9, 0xda, 0x2a, 0xfa, 0x0b, 0x7a, 0xff, 0xb3, 0x48, 0x1e, 0xf2, 0x02, 0xcb,
	0xb3, 0xba, 0xfc, 0x0b, 0x50, 0x07, 0xa0, 0x32, 0xa9, 0xc8, 0xcc, 0x8d, 0x36, 0x3f, 0x21, 0xf4,
	0x37, 0x0c, 0xfe, 0x61, 0x24, 0xb6, 0xb9, 0x44, 0xa5, 0x74, 0x89, 0x65, 0x3a, 0x9c, 0x43, 0xfa,
	0x07, 0xac, 0x40, 0x25, 0xe6, 0xec, 0xfe, 0xf4, 0xe7, 0xa4, 0x8a, 0x76, 0x72, 0x12, 0x2b, 0xd7,
	0x05, 0x65, 0x0e, 0x72, 0x8f, 0x72, 0x11, 0x9b, 0x1c, 0x7a, 0xbc, 0xf6, 0x9e, 0x0b, 0x50, 0x2d,
	0xce, 0x55, 0xae, 0x13, 0x9e, 0x8b, 0x18, 0xcd, 0xc2, 0x36, 0x37, 0x7a, 0x7a, 0x07, 0xc3, 0xaa,
	0x22, 0x14, 0xf3, 0x72, 0x04, 0xbd, 0x86, 0xd1, 0x25, 0x2b, 0x3b, 0xd2, 0x51, 0xbd, 0xc6, 0x59,
	0x1e, 0xe3, 0x1f, 0x97, 0x9c, 0xab, 0xdc, 0x6b, 0xcc, 0x86, 0xcf, 0x47, 0x87, 0xbc, 0x1e, 0x1d,
	0xf2, 0x76, 0x74, 0xc8, 0xe3, 0xbb, 0xd3, 0xb8, 0x6f, 0x9b, 0x1f, 0xe5, 0xef, 0x47, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x11, 0x27, 0xa2, 0x2c, 0x36, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PushMsgToConnectClient is the client API for PushMsgToConnect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PushMsgToConnectClient interface {
	//将消息推送到Connect层
	PushMsgToConnectServer(ctx context.Context, in *PushMsgParams, opts ...grpc.CallOption) (*PushMsgRsp, error)
}

type pushMsgToConnectClient struct {
	cc *grpc.ClientConn
}

func NewPushMsgToConnectClient(cc *grpc.ClientConn) PushMsgToConnectClient {
	return &pushMsgToConnectClient{cc}
}

func (c *pushMsgToConnectClient) PushMsgToConnectServer(ctx context.Context, in *PushMsgParams, opts ...grpc.CallOption) (*PushMsgRsp, error) {
	out := new(PushMsgRsp)
	err := c.cc.Invoke(ctx, "/connect.PushMsgToConnect/PushMsgToConnectServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PushMsgToConnectServer is the server API for PushMsgToConnect service.
type PushMsgToConnectServer interface {
	//将消息推送到Connect层
	PushMsgToConnectServer(context.Context, *PushMsgParams) (*PushMsgRsp, error)
}

// UnimplementedPushMsgToConnectServer can be embedded to have forward compatible implementations.
type UnimplementedPushMsgToConnectServer struct {
}

func (*UnimplementedPushMsgToConnectServer) PushMsgToConnectServer(ctx context.Context, req *PushMsgParams) (*PushMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushMsgToConnectServer not implemented")
}

func RegisterPushMsgToConnectServer(s *grpc.Server, srv PushMsgToConnectServer) {
	s.RegisterService(&_PushMsgToConnect_serviceDesc, srv)
}

func _PushMsgToConnect_PushMsgToConnectServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushMsgParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushMsgToConnectServer).PushMsgToConnectServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connect.PushMsgToConnect/PushMsgToConnectServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushMsgToConnectServer).PushMsgToConnectServer(ctx, req.(*PushMsgParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _PushMsgToConnect_serviceDesc = grpc.ServiceDesc{
	ServiceName: "connect.PushMsgToConnect",
	HandlerType: (*PushMsgToConnectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushMsgToConnectServer",
			Handler:    _PushMsgToConnect_PushMsgToConnectServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "push.proto",
}

func (m *MessageBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MsgType != 0 {
		i = encodeVarintPush(dAtA, i, uint64(m.MsgType))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintPush(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintPush(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x32
	}
	if m.SendTime != 0 {
		i = encodeVarintPush(dAtA, i, uint64(m.SendTime))
		i--
		dAtA[i] = 0x28
	}
	if len(m.FileBody) > 0 {
		i -= len(m.FileBody)
		copy(dAtA[i:], m.FileBody)
		i = encodeVarintPush(dAtA, i, uint64(len(m.FileBody)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Urls) > 0 {
		for iNdEx := len(m.Urls) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Urls[iNdEx])
			copy(dAtA[i:], m.Urls[iNdEx])
			i = encodeVarintPush(dAtA, i, uint64(len(m.Urls[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintPush(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPush(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushMsgParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushMsgParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushMsgParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ServerId) > 0 {
		i -= len(m.ServerId)
		copy(dAtA[i:], m.ServerId)
		i = encodeVarintPush(dAtA, i, uint64(len(m.ServerId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPush(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Decompression {
		i--
		if m.Decompression {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Encryption != 0 {
		i = encodeVarintPush(dAtA, i, uint64(m.Encryption))
		i--
		dAtA[i] = 0x10
	}
	if m.Encrypted {
		i--
		if m.Encrypted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PushMsgRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushMsgRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushMsgRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintPush(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPush(dAtA []byte, offset int, v uint64) int {
	offset -= sovPush(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MessageBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPush(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovPush(uint64(l))
	}
	if len(m.Urls) > 0 {
		for _, s := range m.Urls {
			l = len(s)
			n += 1 + l + sovPush(uint64(l))
		}
	}
	l = len(m.FileBody)
	if l > 0 {
		n += 1 + l + sovPush(uint64(l))
	}
	if m.SendTime != 0 {
		n += 1 + sovPush(uint64(m.SendTime))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovPush(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovPush(uint64(l))
	}
	if m.MsgType != 0 {
		n += 1 + sovPush(uint64(m.MsgType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PushMsgParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Encrypted {
		n += 2
	}
	if m.Encryption != 0 {
		n += 1 + sovPush(uint64(m.Encryption))
	}
	if m.Decompression {
		n += 2
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovPush(uint64(l))
	}
	l = len(m.ServerId)
	if l > 0 {
		n += 1 + l + sovPush(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PushMsgRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPush(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPush(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPush(x uint64) (n int) {
	return sovPush(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MessageBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPush
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPush
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPush
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Urls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPush
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Urls = append(m.Urls, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileBody", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPush
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileBody = append(m.FileBody[:0], dAtA[iNdEx:postIndex]...)
			if m.FileBody == nil {
				m.FileBody = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTime", wireType)
			}
			m.SendTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPush
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPush
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPush(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPush
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPush
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushMsgParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPush
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushMsgParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushMsgParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encrypted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Encrypted = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encryption", wireType)
			}
			m.Encryption = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encryption |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decompression", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Decompression = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPush
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &MessageBody{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPush
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPush(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPush
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPush
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushMsgRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPush
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushMsgRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushMsgRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPush(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPush
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPush
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPush(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPush
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPush
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPush
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPush
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPush
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPush
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPush        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPush          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPush = fmt.Errorf("proto: unexpected end of group")
)
