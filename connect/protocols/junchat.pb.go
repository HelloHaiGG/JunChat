// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: junchat.proto

package connect

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//加入聊天室
type JoinRoomParams struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
	Rid                  string   `protobuf:"bytes,2,opt,name=Rid,proto3" json:"Rid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinRoomParams) Reset()         { *m = JoinRoomParams{} }
func (m *JoinRoomParams) String() string { return proto.CompactTextString(m) }
func (*JoinRoomParams) ProtoMessage()    {}
func (*JoinRoomParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_5765ebf00905fd2e, []int{0}
}
func (m *JoinRoomParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinRoomParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoinRoomParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JoinRoomParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinRoomParams.Merge(m, src)
}
func (m *JoinRoomParams) XXX_Size() int {
	return m.Size()
}
func (m *JoinRoomParams) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinRoomParams.DiscardUnknown(m)
}

var xxx_messageInfo_JoinRoomParams proto.InternalMessageInfo

func (m *JoinRoomParams) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *JoinRoomParams) GetRid() string {
	if m != nil {
		return m.Rid
	}
	return ""
}

type JoinRoomRsp struct {
	ServerId             string   `protobuf:"bytes,1,opt,name=ServerId,proto3" json:"ServerId,omitempty"`
	MemberCount          int32    `protobuf:"varint,2,opt,name=MemberCount,proto3" json:"MemberCount,omitempty"`
	OnlineCount          int32    `protobuf:"varint,3,opt,name=OnlineCount,proto3" json:"OnlineCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinRoomRsp) Reset()         { *m = JoinRoomRsp{} }
func (m *JoinRoomRsp) String() string { return proto.CompactTextString(m) }
func (*JoinRoomRsp) ProtoMessage()    {}
func (*JoinRoomRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_5765ebf00905fd2e, []int{1}
}
func (m *JoinRoomRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinRoomRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoinRoomRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JoinRoomRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinRoomRsp.Merge(m, src)
}
func (m *JoinRoomRsp) XXX_Size() int {
	return m.Size()
}
func (m *JoinRoomRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinRoomRsp.DiscardUnknown(m)
}

var xxx_messageInfo_JoinRoomRsp proto.InternalMessageInfo

func (m *JoinRoomRsp) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *JoinRoomRsp) GetMemberCount() int32 {
	if m != nil {
		return m.MemberCount
	}
	return 0
}

func (m *JoinRoomRsp) GetOnlineCount() int32 {
	if m != nil {
		return m.OnlineCount
	}
	return 0
}

//向聊天室发送消息
type SendRoomMsgParams struct {
	Rid                  string   `protobuf:"bytes,1,opt,name=Rid,proto3" json:"Rid,omitempty"`
	ServerId             string   `protobuf:"bytes,2,opt,name=ServerId,proto3" json:"ServerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendRoomMsgParams) Reset()         { *m = SendRoomMsgParams{} }
func (m *SendRoomMsgParams) String() string { return proto.CompactTextString(m) }
func (*SendRoomMsgParams) ProtoMessage()    {}
func (*SendRoomMsgParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_5765ebf00905fd2e, []int{2}
}
func (m *SendRoomMsgParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendRoomMsgParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendRoomMsgParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendRoomMsgParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendRoomMsgParams.Merge(m, src)
}
func (m *SendRoomMsgParams) XXX_Size() int {
	return m.Size()
}
func (m *SendRoomMsgParams) XXX_DiscardUnknown() {
	xxx_messageInfo_SendRoomMsgParams.DiscardUnknown(m)
}

var xxx_messageInfo_SendRoomMsgParams proto.InternalMessageInfo

func (m *SendRoomMsgParams) GetRid() string {
	if m != nil {
		return m.Rid
	}
	return ""
}

func (m *SendRoomMsgParams) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

type SendRoomMsgRsp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendRoomMsgRsp) Reset()         { *m = SendRoomMsgRsp{} }
func (m *SendRoomMsgRsp) String() string { return proto.CompactTextString(m) }
func (*SendRoomMsgRsp) ProtoMessage()    {}
func (*SendRoomMsgRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_5765ebf00905fd2e, []int{3}
}
func (m *SendRoomMsgRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendRoomMsgRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendRoomMsgRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendRoomMsgRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendRoomMsgRsp.Merge(m, src)
}
func (m *SendRoomMsgRsp) XXX_Size() int {
	return m.Size()
}
func (m *SendRoomMsgRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SendRoomMsgRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SendRoomMsgRsp proto.InternalMessageInfo

func (m *SendRoomMsgRsp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func init() {
	proto.RegisterType((*JoinRoomParams)(nil), "connect.JoinRoomParams")
	proto.RegisterType((*JoinRoomRsp)(nil), "connect.JoinRoomRsp")
	proto.RegisterType((*SendRoomMsgParams)(nil), "connect.SendRoomMsgParams")
	proto.RegisterType((*SendRoomMsgRsp)(nil), "connect.SendRoomMsgRsp")
}

func init() { proto.RegisterFile("junchat.proto", fileDescriptor_5765ebf00905fd2e) }

var fileDescriptor_5765ebf00905fd2e = []byte{
	// 294 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0x2a, 0xcd, 0x4b,
	0xce, 0x48, 0x2c, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4f, 0xce, 0xcf, 0xcb, 0x4b,
	0x4d, 0x2e, 0x51, 0x32, 0xe1, 0xe2, 0xf3, 0xca, 0xcf, 0xcc, 0x0b, 0xca, 0xcf, 0xcf, 0x0d, 0x48,
	0x2c, 0x4a, 0xcc, 0x2d, 0x16, 0x12, 0xe0, 0x62, 0x0e, 0xcd, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4,
	0xe0, 0x0c, 0x02, 0x31, 0x41, 0x22, 0x41, 0x99, 0x29, 0x12, 0x4c, 0x10, 0x91, 0xa0, 0xcc, 0x14,
	0xa5, 0x5c, 0x2e, 0x6e, 0x98, 0xae, 0xa0, 0xe2, 0x02, 0x21, 0x29, 0x2e, 0x8e, 0xe0, 0xd4, 0xa2,
	0xb2, 0xd4, 0x22, 0x4f, 0x98, 0x3e, 0x38, 0x5f, 0x48, 0x81, 0x8b, 0xdb, 0x37, 0x35, 0x37, 0x29,
	0xb5, 0xc8, 0x39, 0xbf, 0x34, 0xaf, 0x04, 0x6c, 0x08, 0x6b, 0x10, 0xb2, 0x10, 0x48, 0x85, 0x7f,
	0x5e, 0x4e, 0x66, 0x5e, 0x2a, 0x44, 0x05, 0x33, 0x44, 0x05, 0x92, 0x90, 0x92, 0x23, 0x97, 0x60,
	0x70, 0x6a, 0x5e, 0x0a, 0xc8, 0x3a, 0xdf, 0xe2, 0x74, 0x84, 0x3b, 0x83, 0x10, 0xee, 0x0c, 0xca,
	0x4c, 0x41, 0x71, 0x06, 0x13, 0xaa, 0x33, 0x94, 0x54, 0xb8, 0xf8, 0x90, 0x8c, 0x00, 0x39, 0x5a,
	0x88, 0x8b, 0xc5, 0x39, 0x3f, 0x25, 0x15, 0x6c, 0x00, 0x6b, 0x10, 0x98, 0x6d, 0x34, 0x8d, 0x91,
	0x8b, 0xdb, 0xab, 0x34, 0xcf, 0x39, 0x23, 0xb1, 0x04, 0xa4, 0x52, 0xc8, 0x9e, 0x8b, 0x07, 0xe6,
	0x4f, 0xa7, 0x4a, 0xcf, 0x14, 0x21, 0x71, 0x3d, 0x68, 0xb8, 0xe9, 0xa1, 0x06, 0x9a, 0x94, 0x08,
	0x86, 0x44, 0x50, 0x71, 0x81, 0x12, 0x83, 0x90, 0x1b, 0x17, 0x2f, 0xc8, 0x5a, 0xdf, 0xe2, 0xf4,
	0x90, 0x7c, 0xb0, 0x89, 0x52, 0x70, 0x85, 0x18, 0x3e, 0x92, 0x12, 0xc7, 0x26, 0x07, 0x36, 0xc7,
	0x49, 0xe0, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf1,
	0x58, 0x8e, 0x21, 0x89, 0x0d, 0x1c, 0x91, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x2c,
	0x88, 0x4b, 0xd9, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// JunChatRoomClient is the client API for JunChatRoom service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JunChatRoomClient interface {
	JoinRoomById(ctx context.Context, in *JoinRoomParams, opts ...grpc.CallOption) (*JoinRoomRsp, error)
	SendMsgToRoom(ctx context.Context, in *SendRoomMsgParams, opts ...grpc.CallOption) (*SendRoomMsgRsp, error)
}

type junChatRoomClient struct {
	cc *grpc.ClientConn
}

func NewJunChatRoomClient(cc *grpc.ClientConn) JunChatRoomClient {
	return &junChatRoomClient{cc}
}

func (c *junChatRoomClient) JoinRoomById(ctx context.Context, in *JoinRoomParams, opts ...grpc.CallOption) (*JoinRoomRsp, error) {
	out := new(JoinRoomRsp)
	err := c.cc.Invoke(ctx, "/connect.JunChatRoom/JoinRoomById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *junChatRoomClient) SendMsgToRoom(ctx context.Context, in *SendRoomMsgParams, opts ...grpc.CallOption) (*SendRoomMsgRsp, error) {
	out := new(SendRoomMsgRsp)
	err := c.cc.Invoke(ctx, "/connect.JunChatRoom/SendMsgToRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JunChatRoomServer is the server API for JunChatRoom service.
type JunChatRoomServer interface {
	JoinRoomById(context.Context, *JoinRoomParams) (*JoinRoomRsp, error)
	SendMsgToRoom(context.Context, *SendRoomMsgParams) (*SendRoomMsgRsp, error)
}

// UnimplementedJunChatRoomServer can be embedded to have forward compatible implementations.
type UnimplementedJunChatRoomServer struct {
}

func (*UnimplementedJunChatRoomServer) JoinRoomById(ctx context.Context, req *JoinRoomParams) (*JoinRoomRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRoomById not implemented")
}
func (*UnimplementedJunChatRoomServer) SendMsgToRoom(ctx context.Context, req *SendRoomMsgParams) (*SendRoomMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsgToRoom not implemented")
}

func RegisterJunChatRoomServer(s *grpc.Server, srv JunChatRoomServer) {
	s.RegisterService(&_JunChatRoom_serviceDesc, srv)
}

func _JunChatRoom_JoinRoomById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRoomParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JunChatRoomServer).JoinRoomById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connect.JunChatRoom/JoinRoomById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JunChatRoomServer).JoinRoomById(ctx, req.(*JoinRoomParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _JunChatRoom_SendMsgToRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRoomMsgParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JunChatRoomServer).SendMsgToRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connect.JunChatRoom/SendMsgToRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JunChatRoomServer).SendMsgToRoom(ctx, req.(*SendRoomMsgParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _JunChatRoom_serviceDesc = grpc.ServiceDesc{
	ServiceName: "connect.JunChatRoom",
	HandlerType: (*JunChatRoomServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinRoomById",
			Handler:    _JunChatRoom_JoinRoomById_Handler,
		},
		{
			MethodName: "SendMsgToRoom",
			Handler:    _JunChatRoom_SendMsgToRoom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "junchat.proto",
}

func (m *JoinRoomParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinRoomParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JoinRoomParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Rid) > 0 {
		i -= len(m.Rid)
		copy(dAtA[i:], m.Rid)
		i = encodeVarintJunchat(dAtA, i, uint64(len(m.Rid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintJunchat(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JoinRoomRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinRoomRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JoinRoomRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OnlineCount != 0 {
		i = encodeVarintJunchat(dAtA, i, uint64(m.OnlineCount))
		i--
		dAtA[i] = 0x18
	}
	if m.MemberCount != 0 {
		i = encodeVarintJunchat(dAtA, i, uint64(m.MemberCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ServerId) > 0 {
		i -= len(m.ServerId)
		copy(dAtA[i:], m.ServerId)
		i = encodeVarintJunchat(dAtA, i, uint64(len(m.ServerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SendRoomMsgParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendRoomMsgParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendRoomMsgParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ServerId) > 0 {
		i -= len(m.ServerId)
		copy(dAtA[i:], m.ServerId)
		i = encodeVarintJunchat(dAtA, i, uint64(len(m.ServerId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Rid) > 0 {
		i -= len(m.Rid)
		copy(dAtA[i:], m.Rid)
		i = encodeVarintJunchat(dAtA, i, uint64(len(m.Rid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SendRoomMsgRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendRoomMsgRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendRoomMsgRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintJunchat(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintJunchat(dAtA []byte, offset int, v uint64) int {
	offset -= sovJunchat(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *JoinRoomParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovJunchat(uint64(l))
	}
	l = len(m.Rid)
	if l > 0 {
		n += 1 + l + sovJunchat(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JoinRoomRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerId)
	if l > 0 {
		n += 1 + l + sovJunchat(uint64(l))
	}
	if m.MemberCount != 0 {
		n += 1 + sovJunchat(uint64(m.MemberCount))
	}
	if m.OnlineCount != 0 {
		n += 1 + sovJunchat(uint64(m.OnlineCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SendRoomMsgParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Rid)
	if l > 0 {
		n += 1 + l + sovJunchat(uint64(l))
	}
	l = len(m.ServerId)
	if l > 0 {
		n += 1 + l + sovJunchat(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SendRoomMsgRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovJunchat(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovJunchat(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozJunchat(x uint64) (n int) {
	return sovJunchat(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *JoinRoomParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJunchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinRoomParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinRoomParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJunchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJunchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJunchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJunchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJunchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJunchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJunchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJunchat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJunchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinRoomRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJunchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinRoomRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinRoomRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJunchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJunchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJunchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberCount", wireType)
			}
			m.MemberCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJunchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineCount", wireType)
			}
			m.OnlineCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJunchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnlineCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipJunchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJunchat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJunchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendRoomMsgParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJunchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendRoomMsgParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendRoomMsgParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJunchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJunchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJunchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJunchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJunchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJunchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJunchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJunchat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJunchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendRoomMsgRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJunchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendRoomMsgRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendRoomMsgRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJunchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipJunchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJunchat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJunchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipJunchat(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowJunchat
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJunchat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJunchat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthJunchat
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupJunchat
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthJunchat
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthJunchat        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowJunchat          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupJunchat = fmt.Errorf("proto: unexpected end of group")
)
